{"version":3,"sources":["auth.js"],"names":["const","lsKeys","token","page","localStorage","user","pass","cloudflareErrors","loaderSection","document","querySelector","classList","add","loginSection","remove","floatingBtn","error","statusText","response","status","description","data","swal","dest","trigger","value","trim","axios","post","username","password","then","success","window","location","catch","onAxiosError","unhide","code","removeItem","addEventListener","form","event","preventDefault","loginBtn","checkValidity","do","currentTarget","registerBtn","click","verify"],"mappings":"AAEAA,IAAMC,OAAS,CACbC,MAAO,SAGHC,KAAO,CAEXD,MAAOE,aAAaH,OAAOC,OAG3BG,KAAM,KACNC,KAAM,KAGNC,iBAAkB,CAChB,IAAK,gBACL,IAAK,qBACL,IAAK,uBACL,IAAK,wBACL,IAAK,qBACL,IAAK,uBACL,IAAK,0BACL,IAAK,gBACL,IAAK,oBAITJ,OAAW,WACTH,IAAMQ,EAAgBC,SAASC,cAAc,WACzCF,GAAeA,EAAcG,UAAUC,IAAI,aAE/CZ,IAAMa,EAAeJ,SAASC,cAAc,oBACxCG,GAAcA,EAAaF,UAAUG,OAAO,aAEhDd,IAAMe,EAAcN,SAASC,cAAc,mCACvCK,GAAaA,EAAYJ,UAAUG,OAAO,YAChD,EAGAX,aAAiB,SAAGa,GAClBhB,IAAMiB,EAAad,KAAKI,iBAAiBS,EAAME,SAASC,SAAWH,EAAME,SAASD,WAC5EG,EAAcJ,EAAME,SAASG,MAAQL,EAAME,SAASG,KAAKD,YAC3DJ,EAAME,SAASG,KAAKD,YACpB,uFAEJ,OAAOE,KAAQN,EAAME,SAAS,OAAM,IAAID,EAAcG,EAAa,QACrE,EAEAjB,GAAO,SAAIoB,EAAMC,GACfxB,IAAMK,EAAOF,KAAKE,KAAKoB,MAAMC,OAC7B,IAAKrB,EAAM,OAAOiB,KAAK,qBAAsB,kCAAmC,SAEhFtB,IAAMM,EAAOH,KAAKG,KAAKmB,MAAMC,OAC7B,IAAKpB,EAAM,OAAOgB,KAAK,qBAAsB,kCAAmC,SAEhFE,EAAQb,UAAUC,IAAI,cACtBe,MAAMC,KAAK,OAAOL,EAAQ,CACxBM,SAAUxB,EACVyB,SAAUxB,IACTyB,MAAI,SAACb,GACN,IAA8B,IAA1BA,EAASG,KAAKW,QAEhB,OADAR,EAAQb,UAAUG,OAAO,cAClBQ,KAAK,aAAaC,EAAI,IAAKL,EAASG,KAAKD,YAAa,SAG/DhB,aAAaF,MAAQgB,EAASG,KAAKnB,MACnC+B,OAAOC,SAAW,WACpB,IAAGC,OAAK,SAACnB,GACPQ,EAAQb,UAAUG,OAAO,cACzBX,KAAKiC,aAAapB,EACpB,GACF,EAEAb,OAAW,WACTwB,MAAMC,KAAK,oBAAqB,CAC9B1B,MAAOC,KAAKD,QACX6B,MAAI,SAACb,GACN,IAA8B,IAA1BA,EAASG,KAAKW,QAEhB,OADA7B,KAAKkC,SACEf,KAAK,qBAAsBJ,EAASG,KAAKD,YAAa,SAI/Da,OAAOC,SAAW,WACpB,IAAGC,OAAK,SAACnB,GACHA,EAAME,SAASG,MAAqC,QAA7BL,EAAME,SAASG,KAAKiB,MAC7ClC,aAAamC,WAAWtC,OAAOC,OAEjCC,KAAKkC,SACLlC,KAAKiC,aAAapB,EACpB,GACF,GAEAiB,OAAOO,iBAAiB,oBAAkB,WACxCrC,KAAKE,KAAOI,SAASC,cAAc,SACnCP,KAAKG,KAAOG,SAASC,cAAc,SAGnCV,IAAMyC,EAAOhC,SAASC,cAAc,aACpC+B,EAAKD,iBAAiB,UAAQ,SAAEE,GAC9BA,EAAMC,gBACR,IAEA3C,IAAM4C,EAAWnC,SAASC,cAAc,aACpCkC,GACFA,EAASJ,iBAAiB,SAAO,SAAEE,GAC5BD,EAAKI,iBACV1C,KAAK2C,GAAG,QAASJ,EAAMK,cACzB,IAGF/C,IAAMgD,EAAcvC,SAASC,cAAc,gBACvCsC,GACFA,EAAYR,iBAAiB,SAAO,SAAEE,GACpC,IAAKD,EAAKI,gBAER,OAAOD,EAASK,QAElB9C,KAAK2C,GAAG,WAAYJ,EAAMK,cAC5B,IAGE5C,KAAKD,MAAOC,KAAK+C,SAChB/C,KAAKkC,QACZ","file":"auth.js","sourcesContent":["/* global swal, axios */\n\nconst lsKeys = {\n  token: 'token'\n}\n\nconst page = {\n  // user token\n  token: localStorage[lsKeys.token],\n\n  // HTML elements\n  user: null,\n  pass: null,\n\n  // Better Cloudflare errors\n  cloudflareErrors: {\n    520: 'Unknown Error',\n    521: 'Web Server Is Down',\n    522: 'Connection Timed Out',\n    523: 'Origin Is Unreachable',\n    524: 'A Timeout Occurred',\n    525: 'SSL Handshake Failed',\n    526: 'Invalid SSL Certificate',\n    527: 'Railgun Error',\n    530: 'Origin DNS Error'\n  }\n}\n\npage.unhide = () => {\n  const loaderSection = document.querySelector('#loader')\n  if (loaderSection) loaderSection.classList.add('is-hidden')\n\n  const loginSection = document.querySelector('#login.is-hidden')\n  if (loginSection) loginSection.classList.remove('is-hidden')\n\n  const floatingBtn = document.querySelector('.floating-home-button.is-hidden')\n  if (floatingBtn) floatingBtn.classList.remove('is-hidden')\n}\n\n// Handler for Axios errors\npage.onAxiosError = error => {\n  const statusText = page.cloudflareErrors[error.response.status] || error.response.statusText\n  const description = error.response.data && error.response.data.description\n    ? error.response.data.description\n    : 'There was an error with the request.\\nPlease check the console for more information.'\n\n  return swal(`${error.response.status} ${statusText}`, description, 'error')\n}\n\npage.do = (dest, trigger) => {\n  const user = page.user.value.trim()\n  if (!user) return swal('An error occurred!', 'You need to specify a username.', 'error')\n\n  const pass = page.pass.value.trim()\n  if (!pass) return swal('An error occurred!', 'You need to specify a password.', 'error')\n\n  trigger.classList.add('is-loading')\n  axios.post(`api/${dest}`, {\n    username: user,\n    password: pass\n  }).then(response => {\n    if (response.data.success === false) {\n      trigger.classList.remove('is-loading')\n      return swal(`Unable to ${dest}!`, response.data.description, 'error')\n    }\n\n    localStorage.token = response.data.token\n    window.location = 'dashboard'\n  }).catch(error => {\n    trigger.classList.remove('is-loading')\n    page.onAxiosError(error)\n  })\n}\n\npage.verify = () => {\n  axios.post('api/tokens/verify', {\n    token: page.token\n  }).then(response => {\n    if (response.data.success === false) {\n      page.unhide()\n      return swal('An error occurred!', response.data.description, 'error')\n    }\n\n    // Redirect to dashboard if token is valid\n    window.location = 'dashboard'\n  }).catch(error => {\n    if (error.response.data && error.response.data.code === 10001) {\n      localStorage.removeItem(lsKeys.token)\n    }\n    page.unhide()\n    page.onAxiosError(error)\n  })\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  page.user = document.querySelector('#user')\n  page.pass = document.querySelector('#pass')\n\n  // Prevent default form's submit action\n  const form = document.querySelector('#authForm')\n  form.addEventListener('submit', event => {\n    event.preventDefault()\n  })\n\n  const loginBtn = document.querySelector('#loginBtn')\n  if (loginBtn) {\n    loginBtn.addEventListener('click', event => {\n      if (!form.checkValidity()) return\n      page.do('login', event.currentTarget)\n    })\n  }\n\n  const registerBtn = document.querySelector('#registerBtn')\n  if (registerBtn) {\n    registerBtn.addEventListener('click', event => {\n      if (!form.checkValidity()) {\n        // Workaround for browsers to display native form error messages\n        return loginBtn.click()\n      }\n      page.do('register', event.currentTarget)\n    })\n  }\n\n  if (page.token) page.verify()\n  else page.unhide()\n})\n"]}