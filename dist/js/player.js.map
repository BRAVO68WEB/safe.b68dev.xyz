{"version":3,"sources":["player.js"],"names":["const","lsKeys","page","urlPrefix","urlIdentifier","urlInput","document","querySelector","reloadBtn","downloadBtn","uploadRoot","titleFormat","videoContainer","player","window","HELP_IMPROVE_VIDEOJS","onAxiosError","error","statusText","520","521","522","523","524","525","526","527","530","response","status","description","data","swal","toggleReloadBtn","enabled","classList","remove","removeAttribute","add","setAttribute","reloadVideo","value","src","axios","head","then","type","headers","isvideo","startsWith","isaudio","dispose","innerHTML","videoElement","createElement","id","className","appendChild","options","language","playbackRates","responsive","plugins","wavesurfer","backend","videojs","let","message","getPluginVersion","WaveSurfer","log","seekButtons","forward","back","title","replace","history","pushState","catch","addEventListener","mainScript","dataset","location","protocol","host","match","pathname","substring","indexOf","form","event","preventDefault","checkValidity"],"mappings":"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","file":"player.js","sourcesContent":["/* global swal, axios, videojs, WaveSurfer */\n\n// eslint-disable-next-line no-unused-vars\nconst lsKeys = {}\n\n// eslint-disable-next-line no-unused-vars\nconst page = {\n  urlPrefix: null,\n  urlIdentifier: null,\n\n  urlInput: document.querySelector('#identifier'),\n  reloadBtn: document.querySelector('#reloadBtn'),\n  downloadBtn: document.querySelector('#downloadBtn'),\n  uploadRoot: null,\n  titleFormat: null,\n\n  videoContainer: document.querySelector('#playerContainer'),\n  player: null\n}\n\n// Disable video.js telemetry (should already be disabled by default since v7 though)\nwindow.HELP_IMPROVE_VIDEOJS = false\n\n// Handler for Axios errors\npage.onAxiosError = error => {\n  // Better Cloudflare errors\n  const cloudflareErrors = {\n    520: 'Unknown Error',\n    521: 'Web Server Is Down',\n    522: 'Connection Timed Out',\n    523: 'Origin Is Unreachable',\n    524: 'A Timeout Occurred',\n    525: 'SSL Handshake Failed',\n    526: 'Invalid SSL Certificate',\n    527: 'Railgun Error',\n    530: 'Origin DNS Error'\n  }\n\n  const statusText = cloudflareErrors[error.response.status] || error.response.statusText\n\n  const description = error.response.data && error.response.data.description\n    ? error.response.data.description\n    : ''\n  return swal(`${error.response.status} ${statusText}`, description, 'error')\n}\n\npage.toggleReloadBtn = enabled => {\n  if (enabled) {\n    page.reloadBtn.classList.remove('is-loading')\n    page.reloadBtn.removeAttribute('disabled')\n  } else {\n    page.reloadBtn.classList.add('is-loading')\n    page.reloadBtn.setAttribute('disabled', true)\n  }\n}\n\npage.reloadVideo = () => {\n  if (!page.urlInput.value) return\n\n  page.toggleReloadBtn(false)\n  const src = `${page.uploadRoot}/${page.urlInput.value}`\n\n  axios.head(src).then(response => {\n    if (response.status !== 200 && response.status !== 304) {\n      page.toggleReloadBtn(true)\n      return page.onAxiosError(response)\n    }\n\n    const type = response.headers['content-type'] || ''\n    const isvideo = type.startsWith('video/')\n    const isaudio = type.startsWith('audio/')\n    if (!isvideo && !isaudio) {\n      page.toggleReloadBtn(true)\n      return swal('An error occurred!', 'The requested upload does not appear to be a media file.', 'error')\n    }\n\n    if (page.player) {\n      page.player.dispose()\n      page.videoContainer.innerHTML = ''\n    }\n\n    const videoElement = document.createElement('video-js')\n    videoElement.id = 'video-js'\n    videoElement.className = 'video-js vjs-default-skin vjs-fluid vjs-big-play-centered'\n    videoElement.setAttribute('controls', true)\n    videoElement.setAttribute('preload', 'auto')\n\n    page.videoContainer.appendChild(videoElement)\n\n    const options = {\n      language: 'en',\n      playbackRates: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n      responsive: true\n    }\n\n    if (isaudio) {\n      options.plugins = {\n        wavesurfer: {\n          backend: 'MediaElement'\n        }\n      }\n    }\n\n    page.player = videojs('video-js', options, () => {\n      let message = `Using video.js ${videojs.VERSION}`\n      if (isaudio) {\n        message += `with videojs-wavesurfer ${videojs.getPluginVersion('wavesurfer')} and wavesurfer.js ${WaveSurfer.VERSION}`\n      }\n      videojs.log(message)\n      page.player.src({ src, type })\n    })\n    page.player.seekButtons({ forward: 10, back: 10 })\n\n    if (page.titleFormat) {\n      document.title = page.titleFormat.replace(/%identifier%/g, page.urlInput.value)\n    }\n\n    if (page.downloadBtn) {\n      page.downloadBtn.setAttribute('href', src)\n    }\n\n    window.history.pushState(null, null, page.urlPrefix + page.urlInput.value)\n    page.toggleReloadBtn(true)\n  }).catch(error => {\n    page.toggleReloadBtn(true)\n    page.onAxiosError(error)\n  })\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const mainScript = document.querySelector('#mainScript')\n  if (!mainScript || typeof mainScript.dataset.uploadRoot === 'undefined') return\n\n  page.uploadRoot = mainScript.dataset.uploadRoot\n  page.titleFormat = mainScript.dataset.titleFormat\n\n  let urlPrefix = window.location.protocol + '//' + window.location.host\n  const match = window.location.pathname.match(/.*\\/(.*)$/)\n  if (!match || !match[1]) {\n    return swal('An error occurred!', 'Failed to parse upload identifier from URL.', 'error')\n  }\n\n  page.urlIdentifier = match[1]\n  urlPrefix += window.location.pathname.substring(0, window.location.pathname.indexOf(match[1]))\n  page.urlPrefix = urlPrefix\n\n  if (!page.urlInput) return\n  page.urlInput.value = page.urlIdentifier\n\n  // Prevent default form's submit actio\n  const form = document.querySelector('#inputForm')\n  form.addEventListener('submit', event => {\n    event.preventDefault()\n  })\n\n  if (!page.videoContainer) return\n\n  page.reloadBtn = document.querySelector('#reloadBtn')\n  if (page.reloadBtn) {\n    page.reloadBtn.addEventListener('click', event => {\n      if (!form.checkValidity()) return\n      page.reloadVideo()\n    })\n  }\n\n  page.reloadVideo()\n})\n"]}